@using Banking.Providers
@using Banking.Services
@using JetBrains.Annotations
@using Hub.Shared.DataContracts.Banking.SearchParameters
@using Hub.Shared.DataContracts.Banking.Dto

@inject IAccountProvider _accountProvider
@inject IAccountService _accountService
@inject ISnackbar _snackbar

@inherits Widget

<section class="@Class">
    <header class="@(WidgetMode ? "card" : "row mb-3")">
        <div class="@(WidgetMode ? "card-body" : "col-12")">
            @if (ChildContent != null)
            {
                @ChildContent
            }
            <button
                class="btn btn-primary float-end"
                @onclick="OpenAddAccountDialog">
                Add account
            </button>
        </div>
    </header>
    
   <section class="card @(WidgetMode ? "" : "mt-2")">
       <div class="card-body table-container @(WidgetMode ? "pt-0" : "")">
           @if (_searching)
           {
               <p>
                   <em>Searching...</em>
               </p>
           }
           else if (!Accounts.Any())
           {
               <p>
                   <em>No accounts found</em>
               </p>
           }
           else
           {
               <table class="table table-borderless table-hover @(WidgetMode ? "table-widget" : "table-full-size")">
                   @if (!WidgetMode)
                   {
                       <thead>
                       <tr>
                           <th>Name</th>
                           @if (!WidgetMode)
                           {
                               <th>Bank</th>
                               <th>Account type</th>
                           }
                           <th>Balance</th>
                       </tr>
                       </thead>
                   }
                   <tbody>
                   @foreach (var account in Accounts)
                   {
                       <tr>
                           <td class="py-3 align-middle" onclick="@(() => OpenEditAccountDialog(account.Id))">@(WidgetMode ? $"{account.Name} ({account.Bank})" : $"{account.Name}")</td>
                           @if (!WidgetMode)
                           {
                               <td class="py-3 align-middle" onclick="@(() => OpenEditAccountDialog(account.Id))">@account.Bank</td>
                               <td class="py-3 align-middle" onclick="@(() => OpenEditAccountDialog(account.Id))">@account.AccountType</td>
                           }
                           <td class="py-3">
                               <EditForm Model="account">
                                   <InputNumber class="form-control"
                                                disabled="@_saving"
                                                TValue="decimal"
                                                ValueChanged="async value => await UpdateAccountBalance(value, account)"
                                                Value="account.Balance"
                                                ValueExpression="() => account.Balance"/>
                               </EditForm>
                           </td>
                       </tr>
                   }
                   </tbody>
               </table>
           }
       </div>
    </section>
</section>


@code {
    [Parameter]
    public int? Take { get; set; }

    [Parameter]
    [CanBeNull]
    public RenderFragment ChildContent { get; set; }
    
    private AccountSearchParameters AccountSearchParameters { get; set; } = new();
    private IList<AccountDto> Accounts { get; set; }
    private bool _searching = true;
    private bool _saving = false;
    
    protected override async Task OnInitializedAsync()
    {
        AccountSearchParameters.Take = Take;

        await Search();
    }

    private async Task Search()
    {
        _searching = true;
        
        Accounts = await _accountProvider.GetAccounts(AccountSearchParameters);
        Accounts = Accounts.ToList();

        _searching = false;
    }

    private async Task UpdateAccountBalance(decimal value, AccountDto account)
    {        
        account.Balance = value;

        _saving = true;
        
        await _accountService.UpdateAccount(account);
        
        _snackbar.Add("Account balance saved", Severity.Success);

        _saving = false;
    }
    
    private async Task OpenAddAccountDialog()
    {
        var parameters = new DialogParameters
        {
            { nameof(AddAccountDialog.OnAccountAdded), OnAccountAdded }
        };
        
        await ShowDialog<AddAccountDialog>(parameters);
    }
    
    private async Task OnAccountAdded(AccountDto account)
    {
        await Search();

        await InvokeAsync(StateHasChanged);
    }
    
    private async Task OpenEditAccountDialog(long accountId)
    {
        var parameters = new DialogParameters
        {
            { nameof(EditAccountDialog.AccountId), accountId.ToString() },
            { nameof(EditAccountDialog.OnAccountUpdated), OnAccountUpdated }
        };

        await ShowDialog<EditAccountDialog>(parameters);
    }

    private async Task OnAccountUpdated(AccountDto account)
    {
        var updatedAccount = Accounts.FirstOrDefault(updatedAccount => updatedAccount.Id == account.Id);

        if (updatedAccount == null)
        {
            return;
        }
        
        var index = Accounts.IndexOf(updatedAccount);

        if (index == -1)
        {
            return;
        }

        Accounts[index] = account;
        
        await InvokeAsync(StateHasChanged);
    }
}