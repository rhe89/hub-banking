@using Banking.Providers
@using Banking.Services
@using Hub.Shared.DataContracts.Banking.Constants
@using Hub.Shared.DataContracts.Banking.Dto
@using Hub.Shared.DataContracts.Banking.SearchParameters


@inject IAccountProvider _accountProvider
@inject IAccountService _accountService
@inject IPreferenceService _preferenceService
@inject ISnackbar _snackbar

@inherits Dialog

<MudDialog>
    <DialogContent>
        <section class="card">
            <div class="card-body">
                <header class="row mb-3">
                    <div class="col-12">
                        <h1 class="h2">Edit account</h1>
                    </div>
                </header>
                @if (Account == null)
                {
                    <p>
                        <em>Loading...</em>
                    </p>
                }
                else
                {
                    <EditForm Model="@Account" OnValidSubmit="@SaveAndClose">
                        <div class="row">
                            <div class="col-lg-2 col-sm-12 py-1">
                                <label for="name">
                                    Name:
                                </label>
                            </div>
                            <div class="col-lg-4 col-sm-12">
                                <InputText
                                    class="form-control"
                                    id="name"
                                    @bind-Value="Account.Name"/>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg-2 col-sm-12 py-1">
                                <label for="account-type">
                                    Account type:
                                </label>
                            </div>
                            <div class="col-lg-4 col-sm-12">
                                <InputSelect
                                    class="form-control"
                                    id="account-type"
                                    @bind-Value="Account.AccountType">
                                    @foreach (var accountType in AccountTypes.ToArray)
                                    {
                                        <option value="@accountType">@accountType</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg-2 col-sm-12 py-1">
                                <label for="bank">
                                    Bank:
                                </label>
                            </div>
                            <div class="col-lg-4 col-sm-12">
                                <InputText
                                    class="form-control"
                                    id="bank"
                                    @bind-Value="Account.Bank"/>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg-2 col-sm-12 py-1">
                                <label for="balance">
                                    Balance:
                                </label>
                            </div>
                            <div class="col-lg-4 col-sm-12">
                                <InputNumber
                                    class="form-control"
                                    id="balance"
                                    @bind-Value="Account.Balance"/>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-1">
                                <button class="btn btn-primary" type="submit">Save</button>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
        </section>

        <section class="row">
            <div class="col-sm-12 col-lg-6">
                <MudContainer Style="max-height: 400px; overflow-y: scroll; padding: 0">
                    <TransactionsTable AccountId="@AccountId"
                                       WidgetMode="true">
                        <h2 class="h3 float-start">Transactions</h2>
                    </TransactionsTable>
                </MudContainer>
            </div>
        </section>
    </DialogContent>
</MudDialog>


@code {
    [Parameter]
    public string AccountId { get; set; }
    
    [Parameter]
    public Func<AccountDto, Task> OnAccountUpdated { get; set; }
    
    private AccountDto Account { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var accounts = await _accountProvider.GetAccounts(new AccountSearchParameters() { AccountIds = new []{ long.Parse(AccountId) } });
        
        Account = accounts.Single();

        await _preferenceService.AddOrUpdatePreference(Preferences.LastViewedAccount, Account.Id.ToString());
    }

    private async Task SaveAndClose()
    {
        await _accountService.UpdateAccount(Account);

        await OnAccountUpdated.Invoke(Account);
        
        _snackbar.Add("Account saved", Severity.Success);

        MudDialog.Close(DialogResult.Ok(true));
    }

}