@using Banking.Providers
@using Banking.Services
@using Banking.Web.WebApp.Models
@using Microsoft.AspNetCore.Components
@using Hub.Shared.DataContracts.Banking.Dto
@using Hub.Shared.DataContracts.Banking.SearchParameters
@using Hub.Shared.Extensions
@using JetBrains.Annotations

@inject IRecurringTransactionProvider _recurringTransactionProvider
@inject IAccountProvider _accountProvider;
@inject IRecurringTransactionService _recurringTransactionService
@inject IPreferenceProvider _preferenceProvider
@inject IPreferenceService _preferenceService 
@inject ISnackbar _snackbar

@inherits Dialog

<MudDialog>
    <DialogContent>
        <section class="card">
            <div class="card-body">
                <header class="row mb-3">
                    <div class="col-12">
                        <h1 class="h3">Add recurring transaction</h1>
                    </div>
                </header>
                <EditForm Model="@RecurringTransaction">
                    <div class="row">
                        <div class="col-lg-2 col-sm-12 py-1">
                            <label>
                                Direction:
                            </label>
                        </div>
                        <div class="col-lg-4 col-sm-12">

                            <InputRadioGroup @bind-Value="RecurringTransaction.TransactionDirection">
                                <InputRadio 
                                    class="d-inline-block"
                                    id="transaction-direction-in"
                                    Value="TransactionDirection.In"
                                    @oninput="RecurringTransaction.OnTransactionDirectionChanged"/>
                                <label for="transaction-direction-in" class="d-inline-block me-3">
                                    In
                                </label>
                                <InputRadio 
                                    class="d-inline-block"
                                    id="transaction-direction-out"
                                    Value="TransactionDirection.Out"
                                    @oninput="RecurringTransaction.OnTransactionDirectionChanged"/>
                                <label for="transaction-direction-out" class="d-inline-block">
                                    Out
                                </label>
                            </InputRadioGroup>

                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-lg-2 col-sm-12 py-1">
                            <label for="account">
                                Account:
                            </label>
                        </div>
                        <div class="col-lg-4 col-sm-12">
                            @if (Accounts != null)
                            {
                                <InputSelect
                                    class="form-control"
                                    id="account"
                                    disabled="@_working"
                                    @bind-Value="RecurringTransaction.AccountId">
                                    @foreach (var account in Accounts)
                                    {
                                        <option value="@account.Id">@($"{account.Name} ({account.Bank})")</option>
                                    }
                                </InputSelect>
                            }
                        </div>
                    </div>
                
                    <div class="row mt-3">
                        <div class="col-lg-2 col-sm-12 py-1">
                            <label for="occurrence">
                                Occurrence:
                            </label>
                        </div>
                        <div class="col-lg-4 col-sm-12">
                            <InputSelect
                                class="form-control"
                                id="occurrence"
                                disabled="@_working"
                                @bind-Value="RecurringTransaction.Occurrence">
                                @foreach (Occurrence occurence in Enum.GetValues(typeof(Occurrence)))
                                {
                                    <option value="@occurence">@occurence.GetEnumDisplayName()</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                
                    <div class="row mt-3">
                        <div class="col-lg-2 col-sm-12 py-1">
                            <label for="transaction-date">
                                Next transaction date:
                            </label>
                        </div>
                        <div class="col-lg-4 col-sm-12">
                            <InputDate
                                class="form-control"
                                id="transaction-date"
                                disabled="@_working"
                                @bind-Value="RecurringTransaction.NextTransactionDate"/>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-lg-2 col-sm-12 py-1">
                            <label for="description">
                                Description:
                            </label>
                        </div>
                        <div class="col-lg-4 col-sm-12">
                            <InputText
                                class="form-control"
                                id="description"
                                disabled="@_working"
                                @oninput="changeEventArgs => RecurringTransaction.OnDescriptionInput(changeEventArgs)"
                                @bind-Value="RecurringTransaction.Description"/>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-lg-2 col-sm-12">
                            <label for="amount">
                                Amount:
                            </label>
                        </div>
                        <div class="col-lg-4 col-sm-12">
                            <InputNumber
                                class="form-control"
                                id="amount"
                                disabled="@_working"
                                @oninput="RecurringTransaction.OnAmountInput"
                                @bind-Value="RecurringTransaction.Amount"/>
                        </div>
                    </div>

                    @if (RecurringTransaction.ValidationErrors.Any(x => !string.IsNullOrEmpty(x.Value)))
                    {
                        <div class="row mt-3">
                            <div class="col-lg-8 col-sm-12">
                                @foreach (var validationError in RecurringTransaction.ValidationErrors.Where(x => !string.IsNullOrEmpty(x.Value)))
                                {
                                    <div class="alert alert-danger" role="alert">
                                        <p>@validationError.Value</p>
                                    </div>
                                }

                            </div>
                        </div>
                    }

                    <div class="row mt-3">
                        <div class="col-lg-6 col-sm-12 btn-group">
                            <button
                                class="btn btn-primary me-2"
                                disabled="@_working"
                                @onclick="SaveAndAddNewRecurringTransaction"
                                type="button">
                                Save and add new transaction
                            </button>
                            <button
                                class="btn btn-primary me-2"
                                disabled="@_working"
                                @onclick="SaveAndClose"
                                type="button">
                                Save and close
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </section>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    [CanBeNull]
    public string AccountId { get; set; }
    
    [Parameter]
    [CanBeNull]
    public string Description { get; set; }
    
    [Parameter]
    [CanBeNull]
    public string Amount { get; set; }
    
    [Parameter]
    [CanBeNull]
    public string TransactionDate { get; set; }
    
    [Parameter]
    public Func<RecurringTransactionDto, Task> OnRecurringTransactionAdded { get; set; }
    
    private RecurringTransactionModel RecurringTransaction { get; set; } = new()
    {
        TransactionDirection = TransactionDirection.Out,
        Occurrence = Occurrence.Monthly,
        NextTransactionDate = DateTime.Now.AddMonths(1)
    };
    
    private IList<AccountDto> Accounts { get; set; } = new List<AccountDto>();
    
    private bool _working;

    protected override async Task OnInitializedAsync()
    {
        _working = true;
        
        Accounts = await _accountProvider.GetAccounts(new AccountSearchParameters());

        if (AccountId != null)
        {
            RecurringTransaction.AccountId = long.Parse(AccountId);
        }
        else
        {
            var lastViewedAccounts = await _preferenceProvider.GetPreferences(Preferences.LastViewedAccount);

            if (lastViewedAccounts.Any())
            {
                RecurringTransaction.AccountId = long.Parse(lastViewedAccounts.First().Value);
            }
        }

        if (!string.IsNullOrEmpty(Description))
        {
            RecurringTransaction.Description = Description;
        }

        if (!string.IsNullOrEmpty(Amount))
        {
            RecurringTransaction.Amount = decimal.Parse(Amount);
        }

        if (!string.IsNullOrEmpty(TransactionDate))
        {
            RecurringTransaction.NextTransactionDate = DateTime.Parse(TransactionDate).AddMonths(1);
        }
        
        _working = false;
    }

    private async Task SaveAndAddNewRecurringTransaction()
    {
        RecurringTransaction.Validate(out var isValid);
        
        if (!isValid)
        {
            return;
        }

        var recurringTransactionWithSameDescription = await _recurringTransactionProvider.GetRecurringTransactions(new RecurringTransactionSearchParameters
        {
            Description = RecurringTransaction.Description
        });

        if (recurringTransactionWithSameDescription.Any())
        {
            return;
        }
        
        await Save();

        RecurringTransaction = new RecurringTransactionModel
        {
            AccountId = RecurringTransaction.AccountId,
            Occurrence = RecurringTransaction.Occurrence,
            NextTransactionDate = RecurringTransaction.NextTransactionDate
        };
    }

    private async Task SaveAndClose()
    {
        RecurringTransaction.Validate(out var isValid);
        
        if (!isValid)
        {
            return;
        }

        var recurringTransactionWithSameDescription = await _recurringTransactionProvider.GetRecurringTransactions(new RecurringTransactionSearchParameters
        {
            Description = RecurringTransaction.Description
        });

        if (recurringTransactionWithSameDescription.Any())
        {
            return;
        }
        
        await Save();

        MudDialog.Close(DialogResult.Ok(true));
    }
    
    private async Task Save()
    {
        _working = true;

        await _preferenceService.AddOrUpdatePreference(Preferences.LastViewedAccount, RecurringTransaction.AccountId.ToString());
        
        await _recurringTransactionService.AddRecurringTransaction(RecurringTransaction);

        await OnRecurringTransactionAdded(RecurringTransaction);
        
        _snackbar.Add("Recurring transaction saved", Severity.Success);

        _working = false;
    }
}