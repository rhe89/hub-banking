@inherits BankingBaseComponent
@implements IDisposable

@inject IBankProvider BankProvider
@inject IBankService BankService
@inject UIService UiService

<Dialog
    HeaderText="@Bank?.Name"
    HeaderIcon="@IconUtils.BankIcon">

    @if (Bank == null)
    {
        <LoadingIndicator/>
    }
    else
    {
        <BankForm
            Bank="@Bank"
            Working="@Working">
            <SubmitActions>
                <EditButtons
                    SaveAction="Save"
                    DeleteAction="Delete"
                    Disabled="@Working"
                    DisableDelete="true"/>
            </SubmitActions>
        </BankForm>
    }

    <AdditionalData>
        <AccountsTable/>
    </AdditionalData>
</Dialog>


@code {

    [Parameter]
    public long BankId { get; set; }

    [Parameter]
    public Func<UIService, long, Task> OnBankUpdated { get; set; }

    [Parameter]
    public Func<UIService, long, Task> OnBankDeleted { get; set; }

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    private BankDto Bank { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Working = true;

        Bank = (await BankProvider.Get(new BankQuery { Id = BankId })).Single();

        State.BankId = BankId;

        Working = false;
    }

    private async Task Save()
    {
        Working = true;

        await BankService.Update(Bank, saveChanges: true);

        await OnBankUpdated.Invoke(UiService, Bank.Id);

        UiService.ShowSnackbar("Account saved", Severity.Success);

        Working = false;

        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task Delete()
    {
        Working = true;

        await BankService.Delete(Bank, true);

        Working = false;

        await OnBankDeleted.Invoke(UiService, Bank.Id);

        MudDialog.Close(DialogResult.Ok(true));
    }

    public void Dispose()
    {
        State.BankId = 0;
    }
}