@using Hub.Shared.DataContracts.Banking.Dto
@using Banking.Providers
@using Hub.Shared.DataContracts.Banking.Query
@using JetBrains.Annotations

@inherits BaseComponent

@inject UIHelpers UiHelpers
@inject IBankProvider BankProvider

<div class="row">
    <div class="widget-col-12 front-page-col-12 col-8 col-sm-9">
        <MudSelect Disabled="State.Banks.Count <= 1"
                   @bind-Value="@State.BankId"
                   Label="Bank"
                   Placeholder="Select bank"
                   Variant="@Constants.InputVariant"
                   AnchorOrigin="@Origin.BottomCenter">
            <MudSelectItem T="long" Value="0">All</MudSelectItem>
            @foreach (var bank in State.Banks)
            {
                <MudSelectItem T="long" Value="@bank.Id">@bank.Name</MudSelectItem>
            }
        </MudSelect>
    </div>

    <MudButtonGroup
        class="col-3 col-sm-2 d-widget-none d-front-page-none"
        Size="@Size.Small"
        DisableElevation="true"
        OverrideStyles="false">
        <MudIconButton
            Disabled="@(State.BankId == 0)"
            Color="@Color.Primary"
            Icon="@Icons.Filled.OpenInNew"
            @onclick="() => OpenEditBankDialog(UiHelpers, State.BankId)"/>
        <MudIconButton
            Icon="@Icons.Filled.Add"
            Color="@Color.Primary"
            @onclick="() => OpenAddBankDialog(UiHelpers)"/>
    </MudButtonGroup>
</div>

@code {

    private async Task OpenAddBankDialog(UIHelpers uiHelpers)
    {
        var parameters = new DialogParameters
        {
            { nameof(AddBankDialog.OnBankAdded), OnBankAdded }
        };

        await uiHelpers.ShowDialog<AddBankDialog>(parameters);
    }

    private async Task OnBankAdded(UIHelpers uiHelpers, long bankId)
    {
        await State.SetBanks();

        uiHelpers.ShowSnackbar("Bank added", Severity.Success);

        await InvokeAsync(StateHasChanged);
    }

    private async Task OpenEditBankDialog(UIHelpers uiHelpers, long bankId)
    {
        var parameters = new DialogParameters
        {
            { nameof(EditBankDialog.BankId), bankId },
            { nameof(EditBankDialog.OnBankUpdated), OnBankUpdated },
            { nameof(EditBankDialog.OnBankDeleted), OnBankDeleted }
        };

        await uiHelpers.ShowDialog<EditBankDialog>(parameters);
    }

    private async Task OnBankUpdated(UIHelpers uiHelpers, long bankId)
    {
        await State.SetBanks();

        uiHelpers.ShowSnackbar("Bank saved", Severity.Success);

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnBankDeleted(UIHelpers uiHelpers, long bankId)
    {
        await State.SetBanks();

        uiHelpers.ShowSnackbar("Bank deleted", Severity.Success);

        await InvokeAsync(StateHasChanged);
    }

}