@inject UIService UiService
@inject ITransactionCategoryProvider TransactionCategoryProvider

<div class="row">
    @if (TransactionCategories != null)
    {
        <div class="widget-col-12 col-8 col-sm-9">
            <MudSelect ReadOnly="@Disabled"
                       Placeholder="Select"
                       @bind-Value="@SelectedTransactionCategoryId"
                       Label="Transaction category"
                       Variant="@Constants.InputVariant"
                       AnchorOrigin="@Origin.BottomCenter">
                @foreach (var transactionCategory in TransactionCategories)
                {
                    <MudSelectItem T="long?" Value="@transactionCategory.Id">@transactionCategory.Name.FirstCharToUpper()</MudSelectItem>
                }
            </MudSelect>
        
            @if (SelectedTransactionCategory != null)
            {
                <MudSelect ReadOnly="@Disabled"
                           Placeholder="Select"
                           Value="@SelectedTransactionSubCategoryId"
                           ValueChanged="@SelectedTransactionSubCategoryIdChanged"
                           Label="Sub category"
                           Variant="@Constants.InputVariant"
                           AnchorOrigin="@Origin.BottomCenter">
                    @foreach (var subCategory in SelectedTransactionCategory.TransactionSubCategories)
                    {
                        <MudSelectItem T="long?" Value="@subCategory.Id">@subCategory.Name.FirstCharToUpper()</MudSelectItem>
                    }
                </MudSelect>
            }
        </div>
    
        <MudButtonGroup
            class="col-3 col-sm-2 d-widget-none"
            Size="@Size.Small"
            DisableElevation="true"
            OverrideStyles="false">
            <MudIconButton
                Disabled="@(SelectedTransactionCategoryId == null)"
                Color="@Color.Primary"
                Icon="@Icons.Filled.OpenInNew"
                @onclick="() => OpenEditTransactionCategoryDialog(UiService, SelectedTransactionCategoryId ?? 0)"/>
            <MudIconButton
                Icon="@Icons.Filled.Add"
                Color="@Color.Primary"
                @onclick="() => OpenAddTransactionCategoryDialog(UiService)"/>
        </MudButtonGroup>
    }
</div>

@code {
    [Parameter]
    public long? SelectedTransactionSubCategoryId { get; set; }

    [Parameter]
    public EventCallback<long?> SelectedTransactionSubCategoryIdChanged { get; set; }
    
    [Parameter]
    public IList<TransactionCategoryDto> TransactionCategories { get; set; }
    
    [Parameter]
    public bool Disabled { get; set; }

    IList<TransactionSubCategoryDto> TransactionSubCategories { get; set; } = new List<TransactionSubCategoryDto>();

    private bool ParametersSet { get; set; }
    
    private long? _selectedTransactionCategoryId;
    
    public long? SelectedTransactionCategoryId
    {
        get => _selectedTransactionCategoryId;
        set
        {
            _selectedTransactionCategoryId = value;

            if (_selectedTransactionCategoryId != null)
            {
                SelectedTransactionCategory = TransactionCategories.Single(x => x.Id == _selectedTransactionCategoryId);
                
                if (ParametersSet)
                {
                    SelectedTransactionSubCategoryId = SelectedTransactionCategory.TransactionSubCategories.FirstOrDefault()?.Id;
                    SelectedTransactionSubCategoryIdChanged.InvokeAsync(SelectedTransactionSubCategoryId).GetAwaiter().GetResult();
                }
            }
        }
    }
    
    private TransactionCategoryDto SelectedTransactionCategory { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        if (ParametersSet)
        {
            return;
        }
        
        TransactionCategories ??= await TransactionCategoryProvider.GetTransactionCategories();

        if (SelectedTransactionSubCategoryId != null)
        {
            SelectedTransactionCategoryId = TransactionCategories
                .FirstOrDefault(x => x.TransactionSubCategories.Any(y => y.Id == SelectedTransactionSubCategoryId.Value))?.Id;
        }

        ParametersSet = true;
    }
    
    private async Task OpenAddTransactionCategoryDialog(UIService uiService)
    {
        var parameters = new DialogParameters
        {
            { nameof(AddTransactionCategoryDialog.OnTransactionCategoryAdded), OnTransactionCategoryAdded },
            { nameof(AddTransactionCategoryDialog.OnShowEditTransactionCategory), OpenEditTransactionCategoryDialog }
        };

        await uiService.ShowDialog<AddTransactionCategoryDialog>(parameters);
    }
    
    private async Task OnTransactionCategoryAdded(UIService uiService, long transactionCategoryId)
    {
        var addedTransactionCategory = (await TransactionCategoryProvider.Get(new TransactionCategoryQuery { Id = transactionCategoryId })).Single();

        TransactionCategories.Insert(0, addedTransactionCategory);
        
        uiService.ShowSnackbar("Transaction category added", Severity.Success);

        await InvokeAsync(StateHasChanged);
    }

    private async Task OpenEditTransactionCategoryDialog(UIService uiService, long transactionCategoryId)
    {
        var parameters = new DialogParameters
        {
            { nameof(EditTransactionCategoryDialog.TransactionCategoryId), transactionCategoryId },
            { nameof(EditTransactionCategoryDialog.OnTransactionCategoryUpdated), OnTransactionCategoryUpdated },
            { nameof(EditTransactionCategoryDialog.OnTransactionCategoryDeleted), OnTransactionCategoryDeleted }
        };

        await uiService.ShowDialog<EditTransactionCategoryDialog>(parameters);
    }

    private async Task OnTransactionCategoryUpdated(UIService uiService, long transactionCategoryId)
    {
        var updatedTransactionCategory = (await TransactionCategoryProvider
            .Get(new TransactionCategoryQuery { Id = transactionCategoryId })).Single();

        TransactionSubCategories = await TransactionCategoryProvider.Get(new TransactionSubCategoryQuery
        {
            TransactionCategoryIds = TransactionCategories.Select(x => x.Id).ToArray()
        });
        
        var existingTransactionCategory = TransactionCategories
            .FirstOrDefault(scheduledTransaction => scheduledTransaction.Id == updatedTransactionCategory.Id);

        if (existingTransactionCategory == null)
        {
            return;
        }
        
        var index = TransactionCategories.IndexOf(existingTransactionCategory);

        if (index == -1)
        {
            return;
        }

        TransactionCategories[index] = updatedTransactionCategory;
        
        uiService.ShowSnackbar("Transaction category updated", Severity.Success);

        await InvokeAsync(StateHasChanged);
    }
    
    private async Task OnTransactionCategoryDeleted(UIService uiService, long transactionCategoryId)
    {
        var deletedTransactionCategory = TransactionCategories
            .FirstOrDefault(updatedTransactionCategory => updatedTransactionCategory.Id == transactionCategoryId);

        if (deletedTransactionCategory == null)
        {
            return;
        }
        
        TransactionCategories.Remove(deletedTransactionCategory);
        
        uiService.ShowSnackbar("Transaction category deleted", Severity.Success);

        await InvokeAsync(StateHasChanged);
    }
}