@inject ITransactionCategoryService TransactionCategoryService
@inject ITransactionCategoryProvider TransactionCategoryProvider;
@inject UIService UiService

@inherits BankingBaseComponent

<Dialog
    HeaderText="@TransactionSubCategory?.Name"
    HeaderIcon="@IconUtils.TransactionCategoryIcon">

    @if (TransactionSubCategory == null)
    {
        <LoadingIndicator/>
    }
    else
    {
        <TransactionSubCategoryForm
            TransactionSubCategory="@TransactionSubCategory"
            Working="@Working">

            <ValidationSummary>
                @if (TransactionSubCategory.ValidationErrors.Any(x => !string.IsNullOrEmpty(x.Value)))
                {
                    <div class="row mt-3">
                        <div class="col-lg-8 col-sm-12">
                            @foreach (var validationError in TransactionSubCategory.ValidationErrors.Where(x => !string.IsNullOrEmpty(x.Value)))
                            {
                                <div class="alert alert-danger" role="alert">
                                    <p>@validationError.Value</p>
                                </div>
                            }

                        </div>
                    </div>
                }
            </ValidationSummary>

            <SubmitActions>
                <EditButtons
                    SaveAction="Save"
                    DeleteAction="Delete"
                    Disabled="@Working"
                    DisableDelete="true"/>
            </SubmitActions>
        </TransactionSubCategoryForm>
    }

    @if (TransactionSubCategory != null)
    {
        <AdditionalData>
            <CascadingValue Name="Query" Value="TransactionQuery">
                <TransactionsTable/>
            </CascadingValue>
        </AdditionalData>
    }
</Dialog>

@code {

    [Parameter]
    public long TransactionSubCategoryId { get; set; }

    [Parameter]
    public Func<UIService, long, Task> OnTransactionSubCategoryUpdated { get; set; }

    [Parameter]
    public Func<UIService, long, Task> OnTransactionSubCategoryDeleted { get; set; }

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    private TransactionSubCategoryModel TransactionSubCategory { get; set; } = new();
    private TransactionQuery TransactionQuery { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var transactionSubCategoryDto = (await TransactionCategoryProvider
            .Get(new TransactionSubCategoryQuery { Id = TransactionSubCategoryId }));

        TransactionSubCategory = TransactionSubCategoryModel.CreateFromDto(transactionSubCategoryDto.Single(x => x.Id == TransactionSubCategoryId));

        TransactionQuery = new TransactionQuery
        {
            TransactionSubCategoryId = TransactionSubCategoryId
        };

        Working = false;
    }

    private async Task Save()
    {
        Working = true;

        TransactionSubCategory.Validate(out var isValid);

        if (!isValid)
        {
            Working = false;
            return;
        }

        await TransactionCategoryService.Update(TransactionSubCategory, true);

        Working = false;

        MudDialog.Close(DialogResult.Ok(true));

        await OnTransactionSubCategoryUpdated.Invoke(UiService, TransactionSubCategory.Id);
    }

    private async Task Delete()
    {
        Working = true;

        await TransactionCategoryService.DeleteTransactionSubCategory(TransactionSubCategory.Id, true);

        MudDialog.Close(DialogResult.Ok(true));

        Working = false;

        await OnTransactionSubCategoryDeleted(UiService, TransactionSubCategory.Id);
    }

}