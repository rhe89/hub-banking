@inject IScheduledTransactionProvider ScheduledTransactionProvider
@inject IScheduledTransactionService ScheduledTransactionService
@inject IAccountProvider AccountProvider
@inject UIService UiService

@inherits BankingBaseComponent

<Dialog
    HeaderText="@ScheduledTransaction?.Description"
    HeaderIcon="@IconUtils.ScheduledTransactionIcon">

    @if (ScheduledTransaction == null)
    {
        <LoadingIndicator/>
    }
    else
    {
        <ScheduledTransactionForm
            ScheduledTransaction="@ScheduledTransaction"
            Working="@Working">

            <ValidationSummary>
                @if (ScheduledTransaction.ValidationErrors.Any(x => !string.IsNullOrEmpty(x.Value)))
                {
                    <div class="row mt-3">
                        <div class="col-lg-8 col-sm-12">
                            @foreach (var validationError in ScheduledTransaction.ValidationErrors.Where(x => !string.IsNullOrEmpty(x.Value)))
                            {
                                <div class="alert alert-danger" role="alert">
                                    <p>@validationError.Value</p>
                                </div>
                            }

                        </div>
                    </div>
                }
            </ValidationSummary>


            <SubmitActions>
                <EditButtons
                    SaveAction="Save"
                    DeleteAction="Delete"
                    Disabled="@Working"/>
            </SubmitActions>
        </ScheduledTransactionForm>

        <MudButton
            class="mt-2"
            Color="@Color.Primary"
            DisableElevation="true"
            Variant="@Constants.FormButtonVariant"
            OnClick="CompleteAndCreateTransaction">
            Complete and create transaction
        </MudButton>
    }
</Dialog>

@code {

    [Parameter]
    public long ScheduledTransactionId { get; set; }

    [Parameter]
    public Func<UIService, long, Task> OnScheduledTransactionUpdated { get; set; }

    [Parameter]
    public Func<UIService, long, Task> OnScheduledTransactionDeleted { get; set; }

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    private ScheduledTransactionModel ScheduledTransaction { get; set; } = new()
    {
        Occurrence = Occurrence.Monthly
    };

    protected override async Task OnInitializedAsync()
    {
        Working = true;

        var scheduledTransactions = await ScheduledTransactionProvider
            .Get(new ScheduledTransactionQuery { Id = ScheduledTransactionId });

        var scheduledTransaction = scheduledTransactions.Single();

        ScheduledTransaction = new ScheduledTransactionModel
        {
            Id = scheduledTransaction.Id,
            CreatedDate = scheduledTransaction.CreatedDate,
            UpdatedDate = scheduledTransaction.UpdatedDate,
            Description = scheduledTransaction.Description,
            AccountId = scheduledTransaction.AccountId,
            TransactionSubCategoryId = scheduledTransaction.TransactionSubCategoryId,
            Amount = scheduledTransaction.Amount,
            NextTransactionDate = scheduledTransaction.NextTransactionDate,
            Occurrence = scheduledTransaction.Occurrence,
            TransactionDirection = scheduledTransaction.Amount > 0 ?
                TransactionDirection.In :
                TransactionDirection.Out,
            Completed = scheduledTransaction.Completed
        };

        Working = false;
    }

    private async Task<bool> Save()
    {
        Working = true;

        ScheduledTransaction.Validate(out var isValid);

        if (!isValid)
        {
            Working = false;
            return false;
        }

        await ScheduledTransactionService.Update(ScheduledTransaction, true);

        await OnScheduledTransactionUpdated.Invoke(UiService, ScheduledTransaction.Id);

        Working = false;

        MudDialog.Close(DialogResult.Ok(true));

        return true;
    }

    private async Task CompleteAndCreateTransaction()
    {
        ScheduledTransaction.Completed = true;
        
        if (!await Save())
        {
            return;
        }
        
        var account = (await AccountProvider.Get(new AccountQuery { Id = ScheduledTransaction.AccountId}))
            .First();

        var transaction = new TransactionModel
        {
            TransactionSubCategoryId = ScheduledTransaction.TransactionSubCategoryId,
            Description = ScheduledTransaction.Description,
            Amount = ScheduledTransaction.Amount,
            TransactionDirection = ScheduledTransaction.TransactionDirection,
            TransactionDate = ScheduledTransaction.NextTransactionDate,
            AccountId = account.Id
        };
        var parameters = new DialogParameters
        {
            { nameof(AddTransactionDialog.Transaction), transaction },
        };

        await UiService.ShowDialog<AddTransactionDialog>(parameters);
    }

    private async Task Delete()
    {
        Working = true;

        await ScheduledTransactionService.Delete(ScheduledTransaction, true);

        Working = false;

        await OnScheduledTransactionDeleted.Invoke(UiService, ScheduledTransaction.Id);

        MudDialog.Close(DialogResult.Ok(true));
    }

}