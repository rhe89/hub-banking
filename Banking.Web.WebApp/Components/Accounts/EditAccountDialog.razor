@using Banking.Providers
@using Banking.Services
@using Banking.Shared
@using Hub.Shared.DataContracts.Banking.Dto
@using Hub.Shared.DataContracts.Banking.Query

@inherits BaseComponent
@implements IDisposable

@inject IAccountProvider AccountProvider
@inject IAccountService AccountService
@inject UIHelpers UiHelpers

<Dialog
    HeaderText="@($"{Account?.Name} ({Account?.Bank?.Name})")"
    HeaderIcon="@IconUtils.AccountIcon">

    @if (Account == null)
    {
        <LoadingIndicator/>
    }
    else
    {
        <AccountForm
            Account="Account"
            Working="Working"
            ExpandDetails="false">
            <SubmitActions>
                
                <EditButtons
                    SaveAction="Save"
                    DeleteAction="Delete"
                    Disabled="Working"
                    DisableDelete="true"/>
            </SubmitActions>
        </AccountForm>
        
        <AdditionalData>
            <TransactionsTable/>
        </AdditionalData>
    }
</Dialog>


@code {

    [Parameter]
    public long AccountId { get; set; }

    [Parameter]
    public Func<UIHelpers, long, Task> OnAccountUpdated { get; set; }

    [Parameter]
    public Func<UIHelpers, long, Task> OnAccountDeleted { get; set; }

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    private AccountDto Account { get; set; }
    
    private DateTime? OriginalBalanceDate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var accounts = await AccountProvider.Get(new AccountQuery
        {
            Id = AccountId, 
            BalanceToDate = State.GetValidToDateForMonthAndYear()
        });
        
        Account = accounts.Single();

        State.BankId = Account.BankId ?? 0;
        State.AccountId = AccountId;
        
        OriginalBalanceDate = Account.BalanceDate;

        Working = false;
    }
    
    private async Task Save()
    {
        Working = true;

        if (!Account.BalanceIsAccumulated && OriginalBalanceDate == Account.BalanceDate)
        {
            Account.BalanceDate = DateTimeUtils.Today;
        }
        
        await AccountService.Update(Account, saveChanges: true);

        await OnAccountUpdated.Invoke(UiHelpers, Account.Id);

        Working = false;
    }

    private async Task Delete()
    {
        Working = true;

        await AccountService.Delete(Account);

        Working = false;
        
        await OnAccountDeleted.Invoke(UiHelpers, Account.Id);

        MudDialog.Close(DialogResult.Ok(true));
    }

    public void Dispose()
    {
        State.AccountId = 0;
        State.BankId = 0;
    }
}