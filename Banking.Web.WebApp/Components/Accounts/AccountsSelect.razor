@inherits BankingBaseComponent

@inject UIService UiService
@inject IAccountService AccountService
@inject IAccountProvider AccountProvider

<div class="row">
    <div class="widget-col-12 front-page-col-12 col-8 col-sm-9">
        <MudSelect Disabled="State.Accounts.Count <= 1"
                   @bind-Value="@State.AccountId"
                   Label="Account"
                   Variant="@Constants.InputVariant"
                   AnchorOrigin="@Origin.BottomCenter">
            <MudSelectItem T="long" Value="0">All</MudSelectItem>
            @foreach (var account in State.Accounts)
            {
            <MudSelectItem T="long" Value="@account.Id">@account.Name @(!string.IsNullOrEmpty(account.Bank?.Name) ? $" ({account.Bank.Name})" : "")</MudSelectItem>
            }
        </MudSelect>
    </div>

    <MudButtonGroup
        class="col-3 col-sm-2 d-widget-none d-front-page-none"
        Size="@Size.Small"
        DisableElevation="true"
        OverrideStyles="false">
        <MudIconButton
            Disabled="@(State.AccountId == 0)"
            Color="@Color.Primary"
            Icon="@Icons.Filled.OpenInNew"
            @onclick="() => OpenEditAccountDialog(UiService, State.AccountId)"/>
        <MudIconButton
            Icon="@Icons.Filled.Add"
            Color="@Color.Primary"
            @onclick="() => OpenAddAccountDialog(UiService)"/>
    </MudButtonGroup>

</div>

@code {
    protected override void OnInitialized()
    {
        State.OnStateUpdated += OnStateUpdated;
    }

    private async void OnStateUpdated(object o, EventArgs eventArgs)
    {
        await InvokeAsync(StateHasChanged);
    }

    protected async Task OpenAddAccountDialog(UIService uiService)
    {
        var parameters = new DialogParameters
        {
            { nameof(AddAccountDialog.OnAccountAdded), OnAccountAdded }
        };

        await uiService.ShowDialog<AddAccountDialog>(parameters);
    }

    protected async Task OnAccountAdded(UIService uiService, long accountId)
    {
        await State.SetAccounts();

        uiService.ShowSnackbar("Account added", Severity.Success);

        await InvokeAsync(StateHasChanged);
    }

    protected async Task OpenEditAccountDialog(UIService uiService, long? accountId)
    {
        if (accountId == null)
        {
            return;
        }

        var parameters = new DialogParameters
        {
            { nameof(EditAccountDialog.AccountId), accountId.Value },
            { nameof(EditAccountDialog.OnAccountUpdated), OnAccountUpdated },
            { nameof(EditAccountDialog.OnAccountDeleted), OnAccountDeleted }
        };

        await uiService.ShowDialog<EditAccountDialog>(parameters);
    }

    protected async Task OnAccountUpdated(UIService uiService, long accountId)
    {
        await State.SetAccounts();

        uiService.ShowSnackbar("Account updated", Severity.Success);

        await InvokeAsync(StateHasChanged);
    }

    protected async Task OnAccountDeleted(UIService uiService, long bankId)
    {
        await State.SetAccounts();

        uiService.ShowSnackbar("Account deleted", Severity.Success);

        await InvokeAsync(StateHasChanged);
    }

}