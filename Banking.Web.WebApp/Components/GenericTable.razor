@using Hub.Shared.DataContracts.Banking.Query;
@using System.Threading
@using Banking.Web.WebApp.Services.Table

@inherits BaseComponent
@implements IDisposable

@inject UIHelpers UiHelpers

@typeparam TQuery where TQuery : Hub.Shared.Storage.Repository.Core.Query, new()

<MudTable
    T="TableRow"
    class="@Class"
    ServerData="@(new Func<TableState, Task<TableData<TableRow>>>(ServerReload))"
    OnRowClick="OnRowClicked"
    @bind-SelectedItems="@TableService.SelectedItems"
    Breakpoint="@Breakpoint.None"
    CustomHeader="true"
    @ref="MudTable">
    <ToolBarContent>

    </ToolBarContent>
    <HeaderContent>
        @if (!string.IsNullOrWhiteSpace(TableHeader))
        {
            <MudTHeadRow IgnoreCheckbox="true" Class="header-centered">
                <MudTh
                    colspan="@(Widget ? TableService.WidgetColumnsCount : TableService.FullSizeColumns)"
                    class="@(Widget ? "p-0 px-1" : "")">
                    @if (Widget)
                    {
                        <header
                            class="float-start p-2 clickable"
                            @onclick="() => TableService.OpenFullVersionDialog(UiHelpers, Query)">
                            <MudIcon class="me-2 mb-2" Icon="@TableHeaderIcon" Color="@(TableHeaderIconColor ?? Color.Default)"/>
                            <h2 class="d-inline-block fs-5">@TableHeader</h2>
                        </header>
                        <MudIconButton
                            class="float-end p-1 mt-1"
                            Icon="@Icons.Filled.Add"
                            @onclick="() => TableService.OpenAddItemDialog(UiHelpers)"/>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-12">
                                <h2 class="float-start mt-2">
                                    <MudIcon
                                        class="me-2 mb-1"
                                        Size="Size.Large"
                                        Icon="@TableHeaderIcon"
                                        Color="@(TableHeaderIconColor ?? Color.Default)"/>
                                    <h2 class="d-inline-block fs-4 ">@TableHeader</h2>
                                </h2>
                                <MudIconButton
                                    class="float-end"
                                    Icon="@Icons.Filled.Add"
                                    Size="@Size.Large"
                                    @onclick="() => TableService.OpenAddItemDialog(UiHelpers)"/>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                @if (TableService.Filter.Any())
                                {
                                    @foreach (var filterElement in TableService.Filter)
                                    {
                                        if (filterElement is InputList<TQuery> {FilterType: FilterType.Select } selectList)
                                        {
                                            <div class="me-2 d-inline-block">
                                                <MudSelect
                                                    T="string"
                                                    Disabled="@(Working || !selectList.Enabled)"
                                                    Value="@selectList.Value"
                                                    ValueChanged="@(value => selectList.OnChanged(selectList, value, Query))"
                                                    Label="@selectList.Label"
                                                    Variant="@Constants.InputVariant"
                                                    AnchorOrigin="@Origin.BottomCenter">
                                                    @foreach (var selectListItem in selectList.Items)
                                                    {
                                                        <MudSelectItem Value="@selectListItem.Value">@selectListItem.Text</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </div>
                                        }
                                        else if (filterElement is InputList<TQuery> {FilterType: FilterType.Radio } radioList)
                                        {
                                            <div class="me-2 d-inline-block">
                                                <MudRadioGroup
                                                    T="string"
                                                    SelectedOption="@radioList.Value"
                                                    SelectedOptionChanged="@(value => radioList.OnChanged(radioList, value, Query))">
                                                    @foreach (var radioItem in radioList.Items)
                                                    {
                                                        <MudRadio
                                                            Disabled="@(Working || !radioList.Enabled)"
                                                            Option="@radioItem.Value"
                                                            Color="@Color.Primary">
                                                            @radioItem.Text
                                                        </MudRadio>
                                                    }
                                                </MudRadioGroup>
                                            </div>
                                        }
                                        else if (filterElement is Checkbox<TQuery> {FilterType: FilterType.Checkbox } checkbox)
                                        {
                                            <div class="me-4 d-inline-block">
                                                <MudCheckBox
                                                    T="bool"
                                                    Disabled="@(Working || !checkbox.Enabled)"
                                                    Label="@checkbox.Label"
                                                    Checked="@checkbox.Value"
                                                    CheckedChanged="@(value => checkbox.OnChanged(checkbox, value, Query))">
                                                </MudCheckBox>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        </div>
                    }
                </MudTh>
            </MudTHeadRow>
        }
        @if (!Widget)
        {
            <MudTHeadRow>
                @foreach (var th in TableService.HeaderRow)
                {
                    <MudTh Class="@th.TdClass">
                        @foreach (var childElement in th.ChildElements)
                        {
                            if (childElement.Icon != null)
                            {
                                <MudIcon
                                    Icon="@childElement.Icon"
                                    Size="Size.Small"
                                    class="me-1 mb-1 d-inline-block"/>
                            }
                            <MudText
                                class="@(childElement.Icon != null ? $"{childElement.Class} d-inline-block" : childElement.Class)"
                                Color="@(childElement.Color)">
                                @childElement.Text
                            </MudText>
                        }
                    </MudTh>
                }
            </MudTHeadRow>
        }
    </HeaderContent>
    <RowTemplate>
        @foreach (var td in context.Columns)
        {
            <MudTd class="@td.TdClass">
                @foreach (var childElement in td.ChildElements)
                {
                    if (childElement.Icon != null)
                    {
                        <MudIcon
                            Icon="@childElement.Icon"
                            Size="Size.Small"
                            class="me-1 mb-1 d-inline-block"/>
                    }
                    <MudText
                        class="@(childElement.Icon != null ? $"{childElement.Class} d-inline-block" : childElement.Class)"
                        Color="@(childElement.Color)">
                        @childElement.Text
                        @if (!string.IsNullOrEmpty(childElement.SmallText))
                        {
                            <MudText class="ms-1 fs-small align-top d-inline-block">@childElement.SmallText</MudText>
                        }
                    </MudText>
                }
            </MudTd>
        }
    </RowTemplate>
    <FooterContent>
        @if (TableService.Footer != null)
        {
            <MudTd Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="@(Widget ? TableService.WidgetColumnsCount : TableService.FullSizeColumns)">
                @TableService.Footer.ColumnText.Text
            </MudTd>
        }
    </FooterContent>
    <NoRecordsContent>
        <EmptyResultIndicator/>
    </NoRecordsContent>
    <LoadingContent>
        <MudSkeleton Height="40px" Animation="Animation.Pulse"/>
        <MudSkeleton Height="40px" Animation="Animation.Pulse"/>
        <MudSkeleton Height="40px" Animation="Animation.Pulse"/>
        <MudSkeleton Height="40px" Animation="Animation.Pulse"/>
        <MudSkeleton Height="40px" Animation="Animation.Pulse"/>
    </LoadingContent>
    <PagerContent>
        @if (!Widget)
        {
            <MudTablePager/>
        }
    </PagerContent>
</MudTable>


@code {
    [Inject]
    public TableService<TQuery> TableService { get; set; }

    [Parameter]
    public bool Widget { get; set; }

    [CascadingParameter(Name = "UseState")]
    public bool UseState { get; set; } = true;
    
    [Parameter]
    public bool HideFilter { get; set; }

    [Parameter]
    public string TableHeader { get; set; }

    [Parameter]
    public string TableHeaderIcon { get; set; }

    [Parameter]
    public Color? TableHeaderIconColor { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public TQuery Query { get; set; }

    private MudTable<TableRow> MudTable { get; set; }

    public async Task Refresh()
    {
        await MudTable.ReloadServerData();
    }

    protected override void OnInitialized()
    {
        TableService.CreateHeaderRow();

        State.QueryParametersChanged += OnStateChanged;
        
        base.OnInitialized();
    }

    private async void OnStateChanged(object sender, EventArgs eventArgs)
    {
        await InvokeAsync(StateHasChanged);
        await Refresh();
    }

    protected override Task OnParametersSetAsync()
    {
        TableService.Widget = Widget;
        TableService.HideFilter = HideFilter;
        TableService.UseStateForQuerying = UseState;
        
        return base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (MudTable != null)
        {
            TableService.MudTableRef ??= MudTable;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<TableData<TableRow>> ServerReload(TableState tableState)
    {
        var data = await TableService.FetchData(Query, tableState);

        return new TableData<TableRow> { TotalItems = data.Count, Items = data.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize) };
    }

    private async Task OnRowClicked(TableRowClickEventArgs<TableRow> obj)
    {
        var itemId = obj.Item.Id;

        await TableService.OnRowClicked(UiHelpers, itemId);
    }

    public void Dispose()
    {
        State.QueryParametersChanged -= OnStateChanged;
    }

}