@using Banking.Providers
@using Banking.Shared
@using Hub.Shared.DataContracts.Banking.Constants
@using Hub.Shared.DataContracts.Banking.Query

@inherits BaseComponent
@implements IDisposable

@inject UIHelpers UiHelpers
@inject IScheduledTransactionProvider ScheduledTransactionProvider
@inject ITransactionProvider TransactionsProvider
@inject IAccountProvider AccountProvider
@inject IAccountBalanceProvider AccountBalanceProvider

<Widget OnClick="OpenBillingOverview">
    <MudText class="fs-5">Bills to pay</MudText>
    @if (Working)
    {
        <MudSkeleton/>
    }
    else
    {
        <section>
            <MudText class="fs-3">kr @((-UpcomingBillsAmount).ToString("N2"))</MudText>
            <MudText class="" Color="@(BillingAccountsBalance >= (-UpcomingBillsAmount) ? Color.Success : Color.Error)">
                kr @(BillingAccountsBalance.ToString("N2")) available
            </MudText>
            <MudText class="">
                kr @((-PaidBillsAmount).ToString("N2")) paid
            </MudText>
        </section>
    }
</Widget>

@code {
    private TransactionQuery PaidBillsQuery { get; set; }
    private ScheduledTransactionQuery UpcomingBillsQuery { get; set; }
    private decimal BillingAccountsBalance { get; set; }
    private decimal UpcomingBillsAmount { get; set; }
    private decimal PaidBillsAmount { get; set; }
    private bool MonthHasPassed => DateTime.Now > DateTimeUtils.LastDayOfMonth(State.Year, State.Month);

    protected override async Task OnParametersSetAsync()
    {
        Working = true;

        await Search();

        State.QueryParametersChanged += OnStateOnStateChanged;

        Working = false;
    }

    private async void OnStateOnStateChanged(object sender, EventArgs args)
    {
        await Search();

        await InvokeAsync(StateHasChanged);
    }

    private async Task Search()
    {
        await SetBillingAccountsBalance();

        await SetUpcomingBillsAmount();

        await SetPaidBillsAmount();
    }

    private async Task SetBillingAccountsBalance()
    {
        var accountQuery = new AccountQuery
        {
            AccountType = AccountTypes.Billing,
            IncludeSharedAccounts = false,
            BalanceToDate = DateTimeUtils.LastDayOfMonth(State.Year, State.Month)
        };

        var accounts = await AccountProvider.GetAccounts(accountQuery);

        BillingAccountsBalance = accounts.Sum(x => x.Balance);
    }

    private async Task SetUpcomingBillsAmount()
    {
        if (MonthHasPassed)
        {
            UpcomingBillsAmount = 0;
        }
        else
        {
            UpcomingBillsQuery = new ScheduledTransactionQuery
            {
                AccountType = AccountTypes.Billing,
                IncludeCompletedTransactions = false,
                NextTransactionFromDate = DateTimeUtils.FirstDayOfMonth(State.Year, State.Month),
                NextTransactionToDate = DateTimeUtils.LastDayOfMonth(State.Year, State.Month)
            };

            UpcomingBillsAmount = (await ScheduledTransactionProvider
                .GetScheduledTransactions(UpcomingBillsQuery))
                .Sum(x => x.Amount);
        }
    }

    private async Task SetPaidBillsAmount()
    {
        PaidBillsQuery = new TransactionQuery
        {
            AccountType = AccountTypes.Billing,
            IncludeTransactionsFromSharedAccounts = false,
            IncludeExcludedTransactions = false,
            FromDate = DateTimeUtils.FirstDayOfMonth(State.Year, State.Month),
            ToDate = MonthHasPassed
                ? DateTimeUtils.LastDayOfMonth(State.Year, State.Month)
                : DateTime.Now
        };

        PaidBillsAmount = (await TransactionsProvider
            .GetTransactions(PaidBillsQuery))
            .Sum(x => x.Amount);
    }

    private async Task OpenBillingOverview()
    {
        var parameters = new DialogParameters
        {
            { nameof(BillingOverviewDialog.Widget), false },
            { nameof(BillingOverviewDialog.PaidBillsQuery), PaidBillsQuery },
            { nameof(BillingOverviewDialog.UpcomingBillsQuery), UpcomingBillsQuery },
            { nameof(BillingOverviewDialog.BillingAccountsBalance), BillingAccountsBalance },
            { nameof(BillingOverviewDialog.AmountPaid), PaidBillsAmount },
            { nameof(BillingOverviewDialog.AmountRemaining), UpcomingBillsAmount },
        };

        await UiHelpers.ShowDialog<BillingOverviewDialog>(parameters);
    }

    public void Dispose()
    {
        State.QueryParametersChanged -= OnStateOnStateChanged;
    }

}