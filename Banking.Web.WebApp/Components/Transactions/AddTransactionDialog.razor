@using Banking.Providers
@using Banking.Services
@using Banking.Web.WebApp.Models.Form
@using Hub.Shared.DataContracts.Banking.Query

@inject ITransactionService TransactionService
@inject ITransactionProvider TransactionProvider
@inject UIHelpers UiHelpers

@inherits BaseComponent

<Dialog 
    HeaderText="Add transaction"
    HeaderIcon="@IconUtils.TransactionIcon">

    <TransactionForm
        Transaction="@Transaction"
        Working="@Working">

        <ValidationSummary>
            @if (Transaction.ValidationErrors.Any(x => !string.IsNullOrEmpty(x.Value)))
            {
                <div class="row mt-3">
                    <div class="col-lg-8 col-sm-12">
                        @foreach (var validationError in Transaction.ValidationErrors.Where(x => !string.IsNullOrEmpty(x.Value)))
                        {
                            <div class="alert alert-danger" role="alert">
                                <p>@validationError.Value</p>
                            </div>
                        }

                    </div>
                </div>
            }
        </ValidationSummary>

        <SubmitActions>
            <AddButtons
                SaveAndCloseAction="SaveAndClose"
                SaveAndAddNewAction="SaveAndAddNew"
                Disabled="@Working"/>
        </SubmitActions>
    </TransactionForm>

    <AdditionalData>
        <TransactionsTable/>
    </AdditionalData>
</Dialog>

@code {
    [Parameter]
    public Func<UIHelpers, long, Task> OnTransactionAdded { get; set; }
    
    [CascadingParameter] 
    public MudDialogInstance MudDialog { get; set; }
    
    private TransactionModel Transaction { get; set; } = new()
    {
        TransactionDirection = TransactionDirection.Out,
        Source = "ManuallyCreated",
        Exclude = true,
    };
    
    protected override void OnInitialized()
    {
        Working = true;
        
        Transaction.AccountId = State.AccountId;
        Transaction.Amount = 0;
        Transaction.TransactionDate = DateTime.Now;
        Transaction.TransactionType = 0;

        Working = false;
    }

    private async Task UseTransactionDetails(UIHelpers uiHelpers, long transactionId)
    {
        var transaction = (await TransactionProvider.GetTransactions(new TransactionQuery { Id = transactionId })).Single();
        
        Transaction.Amount = transaction.Amount;
        Transaction.AccountId = transaction.AccountId;
        Transaction.Description = transaction.Description;
        Transaction.TransactionType = transaction.TransactionType;
        Transaction.TransactionSubCategoryId = transaction.TransactionSubCategoryId;
        Transaction.TransactionDate = transaction.TransactionDate.AddMonths(1);
        Transaction.Exclude = transaction.Exclude;
        Transaction.TransactionDirection = transaction.Amount > 0 ?
            TransactionDirection.In :
            TransactionDirection.Out;
        
        Transaction.Validate(out _);

        await InvokeAsync(StateHasChanged);
    }
    
    private async Task SaveAndAddNew()
    {
        var saved = await Save();

        if (!saved)
        {
            return;
        }

        Transaction = new TransactionModel
        {
            AccountId = Transaction.AccountId,
            TransactionDate = DateTime.Now,
            TransactionType = 0
        };
    }

    private async Task SaveAndClose()
    {
        var saved = await Save();

        if (!saved)
        {
            return;
        }
        
        MudDialog.Close(DialogResult.Ok(true));
    }
    
    private async Task<bool> Save()
    {        
        Working = true;
        
        Transaction.Validate(out var isValid);
        
        if (!isValid)
        {
            Working = false;
            return false;
        }

        Transaction.TransactionId = $"{Transaction.AccountId}-{Transaction.TransactionDate}-{Transaction.Description}-{Transaction.Amount}";
        
        await TransactionService.AddTransaction(Transaction, saveChanges: true);

        await OnTransactionAdded.Invoke(UiHelpers, Transaction.Id);
        
        Working = false;

        return true;
    }
}