@inject ITransactionService TransactionService
@inject UIService UiService

@inherits BankingBaseComponent

<Dialog
    HeaderText="Add transaction"
    HeaderIcon="@IconUtils.TransactionIcon">

    <TransactionForm
        Transaction="@Transaction"
        Working="@Working">

        <ValidationSummary>
            @if (Transaction.ValidationErrors.Any(x => !string.IsNullOrEmpty(x.Value)))
            {
                <div class="row mt-3">
                    <div class="col-lg-8 col-sm-12">
                        @foreach (var validationError in Transaction.ValidationErrors.Where(x => !string.IsNullOrEmpty(x.Value)))
                        {
                            <div class="alert alert-danger" role="alert">
                                <p>@validationError.Value</p>
                            </div>
                        }

                    </div>
                </div>
            }
        </ValidationSummary>

        <SubmitActions>
            <AddButtons
                SaveAndCloseAction="SaveAndClose"
                SaveAndAddNewAction="SaveAndAddNew"
                Disabled="@Working"/>
        </SubmitActions>
    </TransactionForm>

    <AdditionalData>
        <TransactionsTable/>
    </AdditionalData>
</Dialog>

@code {

    [Parameter]
    public Func<UIService, long, Task> OnTransactionAdded { get; set; }

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public TransactionModel Transaction { get; set; }
    
    protected override void OnInitialized()
    {
        Working = true;

        Transaction ??= new()
        {
            TransactionDirection = TransactionDirection.Out,
            Source = "ManuallyCreated",
            Exclude = true,
            AccountId = State.AccountId,
            Amount = 0,
            TransactionDate = DateTimeUtils.Today,
            TransactionType = 0,
        };

        Working = false;
    }

    private async Task SaveAndAddNew()
    {
        var saved = await Save();

        if (!saved)
        {
            return;
        }

        Transaction = new TransactionModel
        {
            AccountId = Transaction.AccountId,
            TransactionDate = DateTimeUtils.Today,
            TransactionType = 0
        };
    }

    private async Task SaveAndClose()
    {
        var saved = await Save();

        if (!saved)
        {
            return;
        }

        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task<bool> Save()
    {
        Working = true;

        Transaction.Validate(out var isValid);

        if (!isValid)
        {
            Working = false;
            return false;
        }

        Transaction.TransactionId = $"{Transaction.AccountId}-{Transaction.TransactionDate}-{Transaction.Description}-{Transaction.Amount}";

        await TransactionService.Add(Transaction, saveChanges: true);

        if (OnTransactionAdded != null)
        {
            await OnTransactionAdded.Invoke(UiService, Transaction.Id);
        }

        Working = false;

        return true;
    }

}