@using Banking.Providers
@using Banking.Services
@using Hub.Shared.DataContracts.Banking.Query
@using System.Globalization
@using Banking.Web.WebApp.Models.Form

@inject ITransactionProvider TransactionProvider
@inject ITransactionService TransactionService
@inject UIHelpers UiHelpers

@inherits BaseComponent

<Dialog 
    HeaderText="@($"{Transaction?.Description}")"
    HeaderIcon="@IconUtils.TransactionIcon">

    @if (Transaction == null)
    {
        <LoadingIndicator/>
    }
    else
    {
        <TransactionForm
            Transaction="@Transaction"
            Working="@Working">

            <ValidationSummary>
                @if (Transaction.ValidationErrors.Any(x => !string.IsNullOrEmpty(x.Value)))
                {
                    <div class="row mt-3">
                        <div class="col-lg-8 col-sm-12">
                            @foreach (var validationError in Transaction.ValidationErrors.Where(x => !string.IsNullOrEmpty(x.Value)))
                            {
                                <div class="alert alert-danger" role="alert">
                                    <p>@validationError.Value</p>
                                </div>
                            }

                        </div>
                    </div>
                }
            </ValidationSummary>

            <SubmitActions>
                <EditButtons
                    SaveAction="Save"
                    DeleteAction="Delete"
                    Disabled="@Working">
                    <AdditionalButtons>
                        <MudButton
                            class="ms-2"
                            Color="@Color.Primary"
                            DisableElevation="true"
                            Variant="@Constants.FormButtonVariant"
                            disabled="@Working"
                            @onclick="OpenAddScheduledTransactionDialog">
                            <MudIcon Icon="@Icons.Filled.Loop"/>
                            <span class="d-none d-md-block ms-2">
                                Add scheduled transaction
                            </span>
                        </MudButton>
                    </AdditionalButtons>
                </EditButtons>
            </SubmitActions>

        </TransactionForm>
    }
</Dialog>


@code {
    [Parameter]
    public string TransactionId { get; set; }
    
    [Parameter]
    public Func<UIHelpers, long, Task> OnTransactionUpdated { get; set; }
    
    [Parameter]
    public Func<UIHelpers, long, Task> OnTransactionDeleted { get; set; }
    
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    private TransactionModel Transaction { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Working = true;
        
        var transactions = await TransactionProvider.GetTransactions(new TransactionQuery { Id = long.Parse(TransactionId) });

        var transaction = transactions.Single();
        
        if (transaction == null)
        {
            Working = false;
            return;
        }
        
        Transaction = new TransactionModel
        {
            Id = transaction.Id,
            CreatedDate = transaction.CreatedDate,
            UpdatedDate = transaction.UpdatedDate,
            Description = transaction.Description,
            Amount = transaction.Amount, 
            AccountId = transaction.AccountId,
            TransactionSubCategoryId = transaction.TransactionSubCategoryId,
            TransactionDate = transaction.TransactionDate,
            TransactionType = transaction.TransactionType,
            TransactionId = transaction.TransactionId,
            TransactionDirection = transaction.Amount > 0 ? 
                TransactionDirection.In : 
                TransactionDirection.Out,
            Exclude = transaction.Exclude
        };

        Working = false;
    }

    private async Task Save()
    {
        Working = true;

        Transaction.Validate(out var isValid);
        
        if (!isValid)
        {
            Working = false;
            return;
        }
        
        await TransactionService.UpdateTransaction(Transaction, saveChanges: true);

        await OnTransactionUpdated.Invoke(UiHelpers, Transaction.Id);
        
        Working = false;

        MudDialog.Close(DialogResult.Ok(true));
    }
    
    private async Task Delete()
    {
        Working = true;

        await TransactionService.DeleteTransaction(Transaction, saveChanges: true);

        await OnTransactionDeleted.Invoke(UiHelpers, Transaction.Id);
        
        Working = false;
        
        MudDialog.Close(DialogResult.Ok(true));
    }
    
    private async Task OpenAddScheduledTransactionDialog()
    {
        var parameters = new DialogParameters
        {
            { nameof(AddScheduledTransactionDialog.TransactionSubCategoryId), Transaction.TransactionSubCategoryId.ToString() },
            { nameof(AddScheduledTransactionDialog.Description), Transaction.Description },
            { nameof(AddScheduledTransactionDialog.Amount), Transaction.Amount.ToString(CultureInfo.InvariantCulture) },
            { nameof(AddScheduledTransactionDialog.TransactionDate), Transaction.TransactionDate?.ToString(CultureInfo.InvariantCulture) },
        };
        
        await UiHelpers.ShowDialog<AddScheduledTransactionDialog>(parameters);
    }
}