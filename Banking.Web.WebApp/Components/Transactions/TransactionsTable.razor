@using Banking.Providers
@using Banking.Services
@using Banking.Web.WebApp.Extensions
@using Hub.Shared.DataContracts.Banking.Constants
@using Hub.Shared.DataContracts.Banking.Dto
@using Hub.Shared.DataContracts.Banking.SearchParameters
@using JetBrains.Annotations

@inject ITransactionProvider _transactionProvider
@inject IAccountProvider _accountProvider
@inject IPreferenceService _preferenceService;
@inject IPreferenceProvider _preferenceProvider;

@inherits Widget

<section class="@Class">
    <header class="@(WidgetMode ? "card" : "row mb-3")">
        <div class="@(WidgetMode ? "card-body" : "col-12")">
            @if (ChildContent != null)
            {
                @ChildContent
            }
            <button
                class="btn btn-primary float-end"
                @onclick="OpenAddTransactionDialog">
                Add transaction
            </button>
        </div>
    </header>

    <section class="card">
        <div class="card-body @(WidgetMode ? "pb-0 pt-0" : "pb-1")">
            <EditForm Model="TransactionSearchParameters" class="row" OnValidSubmit="Search">
                <div class="@(WidgetMode ? "col-lg-12" : "col-lg-8")">
                    <div class="row">
                        <p class="col-lg-6 col-sm-12">
                            @if (string.IsNullOrEmpty(AccountId) && TransactionSearchParameters.AccountIds != null)
                            {
                                <InputSelect
                                    class="form-select py-2"
                                    disabled="@_searching"
                                    TValue="long"
                                    Value="SelectedAccountId"
                                    ValueChanged="OnAccountChanged"
                                    ValueExpression="() => SelectedAccountId">
                                    @foreach (var account in _availableAccounts)
                                    {
                                        <option value="@account.Id">@($"{account.Name} ({account.Bank})")</option>
                                    }
                                </InputSelect>
                            }
                        </p>
                        <p class="col-sm-12 col-lg-3">
                            @if (TransactionSearchParameters.Months != null)
                            {
                                <InputSelect
                                    class="form-select py-2"
                                    disabled="@_searching"
                                    TValue="int"
                                    Value="SelectedMonth"
                                    ValueChanged="OnMonthChanged"
                                    ValueExpression="() => SelectedMonth">
                                    @foreach (var month in _availableMonths)
                                    {
                                        <option value="@month">@GetMonthText(month)</option>
                                    }
                                </InputSelect>
                            }
                        </p>
                        <p class="col-sm-12 col-lg-3">
                            @if (TransactionSearchParameters.Years != null)
                            {
                                <InputSelect
                                    class="form-select py-2"
                                    disabled="@_searching"
                                    TValue="int"
                                    Value="SelectedYear"
                                    ValueChanged="OnYearChanged"
                                    ValueExpression="() => SelectedYear">
                                    @foreach (var year in _availableYears)
                                    {
                                        <option value="@year">@year</option>
                                    }
                                </InputSelect>
                            }
                        </p>
                    </div>
                </div>
            </EditForm>
        </div>
    </section>

    <section class="card @(WidgetMode ? "" : "mt-2")">
        <div class="card-body table-container @(WidgetMode ? "pt-0" : "")">

            @if (_searching)
            {
                <p>
                    <em>Searching...</em>
                </p>
            }
            else if (!Transactions.Any())
            {
                <p>
                    <em>No transactions found</em>
                </p>
            }
            else
            {
                <table class="table table-borderless table-hover">
                    @if (!WidgetMode)
                    {
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Description</th>
                                <th>Amount</th>
                            </tr>
                        </thead>
                    }
                    <tbody>
                    @foreach (var transaction in Transactions)
                    {
                        <tr onclick="@(() => OpenEditTransactionDialog(transaction.Id))">
                            <td class="py-3">
                                @transaction.TransactionDate.ToNorwegianDateString()
                            </td>
                            <td class="py-3">
                                @if (transaction.Recurring)
                                {
                                    <span class="me-1">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-repeat" viewBox="0 0 16 16">
                                            <path d="M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41zm-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9z"/>
                                            <path fill-rule="evenodd" d="M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5.002 5.002 0 0 0 8 3zM3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9H3.1z"/>
                                        </svg>
                                    </span>
                                }
                                <span>
                                    @transaction.Description
                                </span>
                            </td>
                            <td class="py-3">@transaction.Amount</td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>
    </section>
</section>

@code {
    [Parameter]
    [CanBeNull]
    public string AccountId { get; set; }
    
    [Parameter]
    [CanBeNull]
    public int? Take { get; set; }
    
    [Parameter]
    [CanBeNull]
    public RenderFragment ChildContent { get; set; }
    
    private TransactionSearchParameters TransactionSearchParameters { get; } = new();
    private IList<TransactionDto> Transactions { get; set; }
    
    private IList<int> _availableMonths = new List<int>();
    private IList<int> _availableYears;
    private IList<AccountDto> _availableAccounts;
    private bool _searching = true;
    private long _selectedAccountId;
    private int _selectedMonth;
    private int _selectedYear;

    private long SelectedAccountId
    {
        get => _selectedAccountId;
        set
        {
            if (_selectedAccountId == value)
            {
                return;
            }
            
            _selectedAccountId = value;
            TransactionSearchParameters.AccountIds = new[] { _selectedAccountId };
        }
    }

    private int SelectedMonth
    {
        get => _selectedMonth;
        set
        {
            if (_selectedMonth == value)
            {
                return;
            }
            
            _selectedMonth = value;

            TransactionSearchParameters.Months = _selectedMonth == 0 ? null : new[] { _selectedMonth };
        }
    }

    private int SelectedYear
    {
        get => _selectedYear;
        set
        {
            if (_selectedYear == value)
            {
                return;
            }
            
            _selectedYear = value;
            
            TransactionSearchParameters.Years = _selectedYear == 0 ? null : new[] { _selectedYear };

        }
    }

    protected override async Task OnInitializedAsync()
    {
        await SetParameters();
    }

    private async Task SetParameters()
    {
        TransactionSearchParameters.Take = Take;
        
        _availableAccounts = await _accountProvider.GetAccounts(new AccountSearchParameters());

        if (AccountId != null)
        {
            await OnAccountChanged(long.Parse(AccountId));
            return;
        }
        
        var lastViewedAccount = await _preferenceProvider.GetPreferences(Preferences.LastViewedAccount);

        long accountId;
        
        if (lastViewedAccount.Any())
        {
            accountId = long.Parse(lastViewedAccount.First().Value);
        }
        else
        {
            var accounts = _availableAccounts.Where(x => x.AccountType == AccountTypes.Billing).ToList();

            if (!accounts.Any())
                return;
            
            accountId = accounts.First().Id;
        }

        await OnAccountChanged(accountId);
    }

    private async Task OnAccountChanged(long selectedAccountId)
    {
        await OnAccountChanged(selectedAccountId, null, null);
    }
    
    private async Task OnAccountChanged(long selectedAccountId, int? selectedYear, int? selectedMonth)
    {
        if (SelectedAccountId != selectedAccountId)
        {
            await _preferenceService.AddOrUpdatePreference(Preferences.LastViewedAccount, selectedAccountId.ToString());
        }
        
        SelectedAccountId = selectedAccountId;
        
        await UpdateYearSelectList(selectedYear, selectedMonth);
    }

    private async Task UpdateYearSelectList(int? selectedYear, int? selectedMonth)
    {
        _availableYears = await _transactionProvider.GetTransactionYears(SelectedAccountId);
        
        if (!_availableYears.Any())
        {
            SelectedYear = 0;
            SelectedMonth = 0;
            _availableMonths = new List<int>();
            await Search();
            
            return;
        }

        if (selectedYear == null)
        {
            selectedYear = _availableYears.Last();
        }

        await OnYearChanged(selectedYear.Value, selectedMonth);
    }

    private async Task OnYearChanged(int selectedYear)
    {
        await OnYearChanged(selectedYear, null);
    }
    
    private async Task OnYearChanged(int selectedYear, int? selectedMonth)
    {
        SelectedYear = selectedYear;

        await UpdateMonthSelectList(selectedMonth);
    }

    private async Task UpdateMonthSelectList(int? selectedMonth)
    {
        _availableMonths = await _transactionProvider.GetTransactionMonths(SelectedAccountId, SelectedYear);

        if (selectedMonth == null)
        {
            selectedMonth = _availableMonths.Last();
        }

        await OnMonthChanged(selectedMonth.Value);
    }

    private async Task OnMonthChanged(int selectedMonth)
    {
        SelectedMonth = selectedMonth;

        await Search();
    }

    private async Task Search()
    {
        _searching = true;
        
        Transactions = await _transactionProvider.GetTransactions(TransactionSearchParameters);
        
        _searching = false;

        await InvokeAsync(StateHasChanged);
    }

    private static string GetMonthText(int month) => month switch
    {
        1 => "January",
        2 => "February",
        3 => "March",
        4 => "April",
        5 => "May",
        6 => "June",
        7 => "July",
        8 => "August",
        9 => "September",
        10 => "October",
        11 => "November",
        12 => "December",
        _ => throw new ArgumentException("Invalid month", nameof(month))
    };
    
    private async Task OpenAddTransactionDialog()
    {
        var parameters = new DialogParameters
        {
            { nameof(AddTransactionDialog.OnTransactionAdded), OnRecurringTransactionAdded }
        };
        
        await ShowDialog<AddTransactionDialog>(parameters);
    }
    
    private async Task OnRecurringTransactionAdded(TransactionDto transaction)
    {
        await OnAccountChanged(transaction.AccountId, transaction.TransactionDate.Year, transaction.TransactionDate.Month);
    }
    
    private async Task OpenEditTransactionDialog(long transactionId)
    {
        var parameters = new DialogParameters
        {
            { nameof(EditTransactionDialog.TransactionId), transactionId.ToString() },
            { nameof(EditTransactionDialog.OnTransactionUpdated), OnTransactionUpdated },
            { nameof(EditTransactionDialog.OnTransactionDeleted), OnTransactionDeleted }
        };

        await ShowDialog<EditTransactionDialog>(parameters);
    }
    
    private async Task OnTransactionUpdated(TransactionDto recurringTransaction)
    {
        var updatedTransaction = Transactions
            .FirstOrDefault(updatedTransaction => updatedTransaction.Id == recurringTransaction.Id);

        if (updatedTransaction == null)
        {
            return;
        }
        
        var index = Transactions.IndexOf(updatedTransaction);

        if (index == -1)
        {
            return;
        }

        Transactions[index] = recurringTransaction;
        
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task OnTransactionDeleted(TransactionDto recurringTransaction)
    {
        var deletedTransaction = Transactions
            .FirstOrDefault(updatedTransaction => updatedTransaction.Id == recurringTransaction.Id);

        if (deletedTransaction == null)
        {
            return;
        }
        
        Transactions.Remove(deletedTransaction);

        await InvokeAsync(StateHasChanged);
    }
}