@page "/accounts/{accountId}"

@using Banking.Providers
@using Banking.Services
@using Hub.Shared.DataContracts.Banking.Dto
@using Hub.Shared.DataContracts.Banking.SearchParameters

@inject IAccountProvider _accountProvider
@inject IAccountService _accountService
@inject NavigationManager _uriHelper

@inherits Base

<main class="container mt-3">
    @if (AccountDto != null)
                        {
        <header class="row">
            <div class="col-6">
                <h1>@AccountDto.Name</h1>
            </div>
            <div class="col-2 offset-md-4 btn-group">
                @if (Mode == Mode.ReadOnly)
                {
                    <button class="btn btn-primary" @onclick="() => Mode = Mode.Edit">Edit</button>
                }
                @if (Mode == Mode.Edit)
                {
                    <button class="btn btn-primary" @onclick="() => Mode = Mode.ReadOnly">Details</button>
                }
                <button class="btn btn-primary ms-2" @onclick="GoBack">Back</button>
            </div>
        </header>

        if (Mode == Mode.ReadOnly)
        {
            <AccountReadOnly Account="AccountDto" />
        }
        if (Mode == Mode.Edit)
        {
            <AccountEdit 
                Account="AccountDto"
                OnSave="() => Mode = Mode.ReadOnly"/>
        }
    }

    <TransactionsTable AccountId="@AccountId">
        <h2 class="h3">Transactions</h2>
    </TransactionsTable>
</main>

@code {
    [Parameter]
    public string AccountId { get; set; }

    private Mode Mode { get; set; } = Mode.ReadOnly;
    
    private AccountDto AccountDto { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var accounts = await _accountProvider.GetAccounts(new AccountSearchParameters() { AccountIds = new []{ long.Parse(AccountId) } });
        
        AccountDto = accounts.FirstOrDefault();
    }
}