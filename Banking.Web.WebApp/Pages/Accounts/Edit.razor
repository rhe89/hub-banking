@page "/accounts/{accountId}"

@using Banking.Providers
@using Banking.Services
@using Hub.Shared.DataContracts.Banking.Constants
@using Hub.Shared.DataContracts.Banking.Dto
@using Hub.Shared.DataContracts.Banking.SearchParameters

@inject IAccountProvider _accountProvider
@inject IAccountService _accountService
@inject NavigationManager _uriHelper

@inherits Base

<main class="container mt-3">
    <header class="row">
        <div class="col-sm-12">
            <h1 class="float-start">Account</h1>
            <button class="btn btn-secondary float-end" @onclick="GoBack">Back</button>
        </div>
    </header>

    <section class="card mt-5 mb-5">
        <div class="card-body">
            @if (Account == null)
            {
                <p>
                    <em>Loading...</em>
                </p>
            }
            else
            {
                <EditForm Model="@Account" OnValidSubmit="@Save">
                    <div class="row">
                        <div class="col-lg-2 col-sm-12 py-1">
                            <label for="name">
                                Name:
                            </label>
                        </div>
                        <div class="col-lg-4 col-sm-12">
                            <InputText
                                class="form-control"
                                id="name"
                                @bind-Value="Account.Name"/>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-lg-2 col-sm-12 py-1">
                            <label for="account-type">
                                Account type:
                            </label>
                        </div>
                        <div class="col-lg-4 col-sm-12">
                            <InputSelect
                                class="form-control"
                                id="account-type"
                                @bind-Value="Account.AccountType">
                                @foreach (var accountType in AccountTypes.ToArray)
                                {
                                    <option value="@accountType">@accountType</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-lg-2 col-sm-12 py-1">
                            <label for="bank">
                                Bank:
                            </label>
                        </div>
                        <div class="col-lg-4 col-sm-12">
                            <InputText
                                class="form-control"
                                id="bank"
                                @bind-Value="Account.Bank"/>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-lg-2 col-sm-12 py-1">
                            <label for="balance">
                                Balance:
                            </label>
                        </div>
                        <div class="col-lg-4 col-sm-12">
                            <InputNumber
                                class="form-control"
                                id="balance"
                                @bind-Value="Account.Balance"/>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-1">
                            <button class="btn btn-primary" type="submit">Save</button>
                        </div>
                    </div>
                </EditForm>
            }
        </div>
    </section>
    
    <TransactionsTable AccountId="@AccountId">
        <h2 class="h3 float-start">Transactions</h2>
    </TransactionsTable>
</main>

@code {
    [Parameter]
    public string AccountId { get; set; }
    
    private AccountDto Account { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var accounts = await _accountProvider.GetAccounts(new AccountSearchParameters() { AccountIds = new []{ long.Parse(AccountId) } });
        
        Account = accounts.FirstOrDefault();
    }
    
    private async Task Save()
    {
        await _accountService.UpdateAccount(Account);

        await GoBack();
    }
}