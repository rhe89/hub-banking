@page "/transactions/{transactionId}"

@using Banking.Providers
@using Banking.Services
@using Microsoft.AspNetCore.Components
@using Hub.Shared.DataContracts.Banking.Dto
@using Hub.Shared.DataContracts.Banking.SearchParameters

@inject ITransactionProvider _transactionProvider
@inject ITransactionService _transactionService
@inject IAccountProvider _accountProvider;

@inherits Base

<main class="container mt-3">
    <header class="row">
        <div class="col-6">
            <h1>Transaction details</h1>
        </div>
        <div class="col-1 offset-md-5">
            <button class="btn btn-primary float-end" @onclick="GoBack">Back</button>
        </div>
    </header>

    <section class="card mt-5">
        <div class="card-body">
            @if (TransactionDto == null)
            {
                <p>
                    <em>Loading...</em>
                </p>
            }
            else
            {
                <EditForm Model="@TransactionDto" OnValidSubmit="@Save">
                    <div class="row">
                            <div class="col-2 py-1">
                                <label>Account: </label>
                            </div>
                            <div class="col-6">
                                @if (Accounts != null)
                                {
                                    <InputSelect
                                        class="form-control"
                                        id="account"
                                        @bind-Value="TransactionDto.AccountId">
                                        @foreach (var account in Accounts)
                                        {
                                            <option value="@account.Id">@($"{account.Name} ({account.Bank})")</option>
                                        }
                                    </InputSelect>
                                }
                            </div>
                        </div>
                    <div class="row mt-3">
                        <div class="col-2 py-1">
                            <label>Description: </label>
                        </div>
                        <div class="col-6">
                            <InputText
                                class="form-control"
                                id="description"
                                @bind-Value="TransactionDto.Description"/>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-2 py-1">
                            <label>
                                Transaction date:
                            </label>
                        </div>
                        <div class="col-6">
                            <InputDate
                                class="form-control"
                                id="transaction-date"
                                @bind-Value="TransactionDto.TransactionDate"/>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-2">
                            <label>
                                Amount:
                            </label>
                        </div>
                        <div class="col-6">
                            <InputNumber
                                class="form-control"
                                id="amount"
                                @bind-Value="TransactionDto.Amount"/>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-1">
                            <button class="btn btn-primary" type="submit">Save</button>
                        </div>
                    </div>
                </EditForm>
            }
        </div>
    </section>
</main>

@code {

    [Parameter]
    public string TransactionId { get; set; }

    private TransactionDto TransactionDto { get; set; }
    private IList<AccountDto> Accounts { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var transactions = await _transactionProvider.GetTransactions(new TransactionSearchParameters { TransactionId = long.Parse(TransactionId) });
        Accounts = await _accountProvider.GetAccounts(new AccountSearchParameters());
        
        TransactionDto = transactions.FirstOrDefault();
    }

    private async Task Save()
    {
        await _transactionService.UpdateTransaction(TransactionDto);
        
        NavigationManager.NavigateTo("transactions");
    }
}