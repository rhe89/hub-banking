@page "/"
@page "/index"

@inherits BankingBaseComponent
@implements IDisposable

<main class="front-page container">
    <div class="row">
        <ExpansionSection>
            <TitleContent>
                <h2 class="fs-4">
                    Filters
                </h2>
            </TitleContent>
            <ExpansionBody>
                <div class="col-sm-12 col-lg-3 mt-2 mt-lg-0">
                    <BanksSelect/>
                </div>
                <div class="col-sm-12 col-lg-3 mt-2 mt-lg-0">
                    <AccountsSelect/>
                </div>
                <MonthYearSelect SelectWrapperClass="col-sm-12 col-lg-3 mt-2 mt-lg-0"/>
            </ExpansionBody>
        </ExpansionSection>
    </div>

    <div class="row">
        <div class="col-12 mt-2 mt-4">
            <MonthlyBudgetWidget/>
        </div>
        <div class="col-lg-4 col-12 mt-4">
            <InvestmentsWidget/>
        </div>
        <div class="col-lg-4 col-12 mt-4">
            <SavingsWidget/>
        </div>
        <div class="col-lg-4 col-12 mt-4">
            <BillingWidget/>
        </div>
        <div class="col-lg-6 col-sm-12 mt-4">
            <TransactionsWidget/>
        </div>
        <div class="col-lg-6 col-sm-12 mt-4">
            <AccountsWidget/>
        </div>
        <div class="col-lg-6 col-sm-12 mt-4">
            <TransactionCategoriesWidget/>
        </div>
        <div class="col-lg-6 col-sm-12 mt-4">
            <ScheduledTransactionsWidget/>
        </div>
    </div>
</main>

@code {
    
    protected override async Task OnInitializedAsync()
    {
        Working = true;
        
        await State.InitState();

        State.OnStateUpdated += OnStateChanged;

        await InvokeAsync(StateHasChanged);

        Working = false;
    }

    private async void OnStateChanged(object o, EventArgs eventArgs)
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        State.OnStateUpdated -= OnStateChanged;
    }
}